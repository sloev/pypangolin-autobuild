name: Build pypangolin

on: 
  workflow_dispatch:
  push:
    paths:
      - 'releases/pypangolin_latest.txt'


defaults:
  run:
    shell: bash

env:
  BUILD_TYPE: Release


jobs:
  job1:
    name: build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        shared_libs: ['ON', 'OFF']
        include:
        - os: ubuntu-22.04
          package_manager: "apt"

        - os: ubuntu-24.04
          package_manager: "apt"

    steps:
    - name: "Checkout source code"
      uses: "actions/checkout@v1"
    - name: Read pypangolin_latest.txt file
      id: getversion
      run: echo "::set-output name=version::$(cat releases/pypangolin_latest.txt)"
    - name: Checkout Pangolin
      uses: actions/checkout@v4
      with:
        repository: 'stevenlovegrove/Pangolin'
        ref: ${{ steps.getversion.outputs.version }}
        submodules: true
        fetch-depth: 0
        token: ${{ secrets.REPO_SCOPED_TOKEN }}



    - name: update cython
      run: | 
        pip install --upgrade pip
        pip install --break-system-packages --verbose cython

    - name: "apply patch"
      run: | 
        git config --global user.name 'sloev'
        git config --global user.email 'johannes.valbjorn@gmail.com'
        git cherry-pick 5d553a1250cde3698cae74c8376dfb6b04b7e74c

    - name: Install Dependencies
      env:
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      run: |
        echo "vcpkg location: $(which vcpkg)"
        echo "CMake toolchain file: $TOOLCHAIN_FILE"
        $GITHUB_WORKSPACE/scripts/install_prerequisites.sh -v -u -m ${{matrix.package_manager}} all


    - name: Configure CMake
      run: >
        cmake -G Ninja -B build
        -D CMAKE_BUILD_TYPE=$BUILD_TYPE
        -D CMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE"
        -D BUILD_SHARED_LIBS=${{ matrix.shared_libs }}
        -D BUILD_TESTS=ON

    - name: Build
      run: cmake --build build --config $BUILD_TYPE

    - name: Build Python wheel
      run: cmake --build build -t pypangolin_wheel

    - name: Install Python wheel
      env:
        PIP_BREAK_SYSTEM_PACKAGES: 1
      run: |
        python -m zipfile --list build/pypangolin-*.whl
        pip install build/pypangolin-*.whl
        pip show pypangolin

    - name: Test Python wheel
      if: ${{ !(matrix.package_manager == 'vcpkg' && matrix.shared_libs == 'ON') }}
      run: |
        python -c "import pypangolin"

    - name: Run all tests
      run: |
        cmake --build build --target test

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: "wheel_${{matrix.os}}_shared_libs_${{matrix.shared_libs}}"
        path: build/pypangolin-*.whl
        retention-days: 2

  job2:
    name: create release
    runs-on: ubuntu-latest
    needs: job1

    steps:

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        path: ./wheels
        merge-multiple: true

    - name: Read pypangolin_latest.txt file
      id: getversion
      run: echo "::set-output name=version::$(cat releases/pypangolin_latest.txt)"

    - name: git tag
      run: |
        git config --global user.name 'sloev'
        git config --global user.email 'johannes.valbjorn@gmail.com'
        git tag -a "${{ steps.getversion.outputs.version }}" -m "Version ${{ steps.getversion.outputs.version }}"
        git push --follow-tags

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        name:  ${{ steps.getversion.outputs.version }}
        tag_name: ${{ steps.getversion.outputs.version }}
        files: wheels/*